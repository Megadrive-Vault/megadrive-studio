///////////////////////////////////////////////////////////////////////////////
// mdPluginsList
//
//
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __mdPLUGINSLIST_H__
#define __mdPlUGINSLIST_H__

///////////////////////////////////////////////////////////////////////////////
// Include

#include "mdList.h"

///////////////////////////////////////////////////////////////////////////////
// Class definition

template<class T> class mdPluginsList
{
	///////////////////////////////////////////////////////////////////////////
	public:
	///////

	mdPluginsList(const wxString &path,const wxString &wildcard);
	~mdPluginsList();

	int GetCount(void);
	T* Item(int index);

	///////////////////////////////////////////////////////////////////////////
	protected:
	//////////

	wxString			m_Wildcard;
	wxString			m_Path;
	mdList<T>			*m_List;
	
	void Load(void);
	
	///////////////////////////////////////////////////////////////////////////
	private:
	////////
};

///////////////////////////////////////////////////////////////////////////////
// Constructor

template<class T> 
mdPluginsList<T>::mdPluginsList(const wxString &path,
								const wxString &wildcard)
{
	m_Path=path;
	m_Wildcard=wildcard;
	
	m_List=new mdList<T>;		

	if(m_Path.IsEmpty()==false && m_Wildcard.IsEmpty()==false)
		Load();
}

///////////////////////////////////////////////////////////////////////////////
// Destructor

template<class T>
mdPluginsList<T>::~mdPluginsList(void)
{
	mdPlugin	*p;
	while( (p=m_List->PopBack())!=NULL)
	{	delete(p);}	
}

///////////////////////////////////////////////////////////////////////////////
// Number of plugins

template<class T>
int mdPluginsList<T>::GetCount(void)
{
	return m_List->GetCount();
}

///////////////////////////////////////////////////////////////////////////////
// Load plugins

template<class T>
void mdPluginsList<T>::Load(void)
{
	wxString path(m_Path + m_Wildcard);

	wxString current = wxFindFirstFile(path,wxFILE);
	while (!current.IsEmpty())
	{
		m_List->PushBack(new T(current));		
		current=wxFindNextFile();
	}
}

///////////////////////////////////////////////////////////////////////////////
// Return the object at that index

template<class T>
T* mdPluginsList<T>::Item(int index)
{
	return m_List->Item(index);
}

///////////////////////////////////////////////////////////////////////////////
//
#endif